// File: src\App.jsx
// File: src/App.jsx
import React, { useState, useEffect, lazy, Suspense } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from './firebaseConfig';
import Layout from './components/Layout';
import useAuth from './hooks/useAuth';

const Register = lazy(() => import('./pages/Register'));
const Login = lazy(() => import('./pages/Login'));
const Profile = lazy(() => import('./pages/Profile'));
const UsersList = lazy(() => import('./pages/UsersList'));
const UserProfile = lazy(() => import('./pages/UserProfile'));

function App() {
  const user = useAuth();

  return (
    <Router>
      <Layout user={user}>
        <Suspense fallback={<div>Loading...</div>}>
          <Routes>
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/profile" element={<Profile />} />
            <Route path="/users" element={<UsersList />} />
            <Route path="/profile/:userId" element={<UserProfile />} />
          </Routes>
        </Suspense>
      </Layout>
    </Router>
  );
}

export default App;


// File: src\components\Layout.jsx
// File: src/components/Layout.jsx
import React from 'react';
import Navigation from './Navigation';

const LayoutComponent = ({ user, children }) => (
  <div className="min-h-screen bg-gray-100 p-4">
    <Navigation user={user} />
    {children}
  </div>
);

const Layout = React.memo(LayoutComponent);

export default Layout;


// File: src\components\Navigation.jsx
// File: src/components/Navigation.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { signOut } from 'firebase/auth';
import { auth } from '../firebaseConfig';

const Navigation = React.memo(({ user }) => {
  const navigate = useNavigate();

  const handleLogout = async () => {
    await signOut(auth);
    localStorage.removeItem('email');
    localStorage.removeItem('password');
    navigate('/');
  };

  return (
    <nav className="flex justify-center space-x-4 mb-6">
      <Link to="/" className="text-blue-500 hover:underline">Home</Link>
      {!user && (
        <Link to="/register" className="text-blue-500 hover:underline">Register</Link>
      )}
      {user ? (
        <>
          <Link to="/profile" className="text-blue-500 hover:underline">Profile</Link>
          <Link to="/users" className="text-blue-500 hover:underline">Users</Link>
          <button
            onClick={handleLogout}
            className="text-blue-500 hover:underline focus:outline-none"
          >
            Logout
          </button>
        </>
      ) : (
        <Link to="/login" className="text-blue-500 hover:underline">Login</Link>
      )}
    </nav>
  );
});

export default Navigation;

// File: src\components\user\EmailVerificationLightbox.jsx
// File: src/components/user/EmailVerificationLightbox.jsx
import React, { useState, useEffect } from 'react';

const EmailVerificationLightbox = ({ isOpen, onClose, checkEmailVerification }) => {
  const [verified, setVerified] = useState(false);

  useEffect(() => {
    if (isOpen) {
      const intervalId = setInterval(async () => {
        const result = await checkEmailVerification();
        setVerified(result);
        if (result) {
          clearInterval(intervalId);
          setTimeout(onClose, 2000);
        }
      }, 5000); // Checks every 5 seconds

      return () => clearInterval(intervalId); // Cleanup interval on component unmount or close
    }
  }, [isOpen, checkEmailVerification, onClose]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white p-8 rounded-lg shadow-lg text-center">
        {!verified ? (
          <>
            <div className="loader"></div>
            <p className="mt-4">Checking for email verification, please check your inbox...</p>
          </>
        ) : (
          <>
            <div className="check-icon">✔️</div>
            <p className="mt-4">Email verified!</p>
          </>
        )}
      </div>
    </div>
  );
};

export default EmailVerificationLightbox;



// File: src\components\user\form\AuthForm.jsx
// File: src/components/AuthForm.jsx
import React from 'react';

const AuthForm = ({ title, children, onSubmit }) => (
  <form onSubmit={onSubmit} className="max-w-sm mx-auto bg-white p-4 rounded-lg shadow-md">
    <h2 className="text-xl font-bold mb-4">{title}</h2>
    {children}
    <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600">
      {title}
    </button>
  </form>
);

export default AuthForm;


// File: src\components\user\form\FormInput.jsx
// File: src/components/FormInput.jsx
import React from 'react';

const FormInput = ({ type, value, onChange, placeholder }) => (
  <input
    type={type}
    value={value}
    onChange={onChange}
    placeholder={placeholder}
    className="w-full p-2 mb-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
  />
);

export default FormInput;


// File: src\components\user\form\ProfileForm.jsx
// File: src/components/ProfileForm.jsx
import React from 'react';

const ProfileForm = ({ displayName, bio, setDisplayName, setBio, onSave }) => (
  <>
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700">Display Name</label>
      <input
        type="text"
        value={displayName}
        onChange={(e) => setDisplayName(e.target.value)}
        className="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700">Bio</label>
      <textarea
        value={bio}
        onChange={(e) => setBio(e.target.value)}
        className="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        rows="4"
      ></textarea>
    </div>
    <button
      onClick={onSave}
      className="w-full bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600"
    >
      Save
    </button>
  </>
);

export default ProfileForm;


// File: src\components\user\ResetPasswordButton.jsx
// File: src/components/ResetPasswordButton.jsx
import React from 'react';
import { auth } from '../../firebaseConfig';
import { sendPasswordResetEmail } from 'firebase/auth';

const ResetPasswordButton = ({ email, buttonText = "Reset Password", className = "" }) => {
  
  const handleResetPassword = async () => {
    if (email) {
      try {
        await sendPasswordResetEmail(auth, email);
        alert('Password reset email sent! Please check your inbox.');
      } catch (error) {
        console.error('Error sending password reset email:', error);
        alert('Error sending password reset email. Please try again.');
      }
    } else {
      alert('Please provide a valid email address.');
    }
  };

  return (
    <button
      onClick={handleResetPassword}
      className={`bg-yellow-500 text-white p-2 rounded-lg hover:bg-yellow-600 ${className}`}
    >
      {buttonText}
    </button>
  );
};

export default ResetPasswordButton;


// File: src\components\user\SignIn.jsx
// File: src/components/SignIn.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { auth } from '../../firebaseConfig';
import { signInWithEmailAndPassword } from 'firebase/auth';
import CryptoJS from 'crypto-js';
import AuthForm from '../../components/user/form/AuthForm';
import FormInput from '../../components/user/form/FormInput';

const SECRET_KEY = import.meta.env.VITE_SECRET_KEY;

const SignIn = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const navigate = useNavigate(); 

  useEffect(() => {
    const storedEmail = localStorage.getItem('email');
    const storedPassword = localStorage.getItem('password');
    
    if (storedEmail && storedPassword) {
      setEmail(CryptoJS.AES.decrypt(storedEmail, SECRET_KEY).toString(CryptoJS.enc.Utf8));
      setPassword(CryptoJS.AES.decrypt(storedPassword, SECRET_KEY).toString(CryptoJS.enc.Utf8));
      setRememberMe(true);
    }
  }, []);

  const handleSignIn = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password);
      
      if (rememberMe) {
        localStorage.setItem('email', CryptoJS.AES.encrypt(email, SECRET_KEY).toString());
        localStorage.setItem('password', CryptoJS.AES.encrypt(password, SECRET_KEY).toString());
      } else {
        localStorage.removeItem('email');
        localStorage.removeItem('password');
      }

      navigate('/'); 
    } catch (error) {
      console.error('Error signing in:', error);
      alert('Error signing in');
    }
  };

  return (
    <AuthForm title="Sign In" onSubmit={handleSignIn}>
      <FormInput
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      <FormInput
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <div className="flex items-center mb-4">
        <input
          type="checkbox"
          checked={rememberMe}
          onChange={(e) => setRememberMe(e.target.checked)}
          className="mr-2"
        />
        <label className="text-gray-700">Remember Me</label>
      </div>
    </AuthForm>
  );
};

export default SignIn;


// File: src\components\user\SignUp.jsx
// File: src/components/SignUp.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { auth, db } from '../../firebaseConfig';
import { createUserWithEmailAndPassword, sendEmailVerification } from "firebase/auth";
import { doc, setDoc } from "firebase/firestore";
import AuthForm from '../../components/user/form/AuthForm';
import FormInput from '../../components/user/form/FormInput';
import EmailVerificationLightbox from '../../components/user/EmailVerificationLightbox';

const SignUp = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [isLightboxOpen, setIsLightboxOpen] = useState(false);
  const navigate = useNavigate();

  const handleSignUp = async (e) => {
    e.preventDefault();
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      await setDoc(doc(db, "profiles", user.uid), {
        uid: user.uid,
        email: user.email,
        displayName: displayName,
      });

      await sendEmailVerification(user);
      setIsLightboxOpen(true);
    } catch (error) {
      console.error("Error signing up:", error);
      alert("Error signing up");
    }
  };

  const checkEmailVerification = async () => {
    await auth.currentUser.reload();
    return auth.currentUser.emailVerified;
  };

  return (
    <>
      <AuthForm title="Sign Up" onSubmit={handleSignUp}>
        <input
          type="text"
          placeholder="Display Name"
          value={displayName}
          onChange={(e) => setDisplayName(e.target.value)}
          className="w-full p-2 mb-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <FormInput
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
        />
        <FormInput
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
        />
      </AuthForm>

      <EmailVerificationLightbox
        isOpen={isLightboxOpen}
        onClose={() => {
          setIsLightboxOpen(false);
          navigate('/profile');
        }}
        checkEmailVerification={checkEmailVerification}
      />
    </>
  );
};

export default SignUp;


// File: src\firebaseConfig.js
// src/firebaseConfig.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);

export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);


// File: src\hooks\useAuth.js
// src/hooks/useAuth.js
import { useState, useEffect } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from '../firebaseConfig';

const useAuth = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, setUser);
    return () => unsubscribe();
  }, []);

  return user;
};

export default useAuth;


// File: src\main.jsx
// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css'; // Import Tailwind CSS

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);


// File: src\pages\Login.jsx
// File: src/pages/Login.jsx
import React, { useState } from 'react';
import SignIn from '../components/user/SignIn';
import ResetPasswordButton from '../components/user/ResetPasswordButton';

const Login = () => {
  const [email, setEmail] = useState('');
  const [showResetPassword, setShowResetPassword] = useState(false);

  return (
    <div className="flex flex-col justify-center items-center">
      <h1 className="text-3xl font-bold mb-6">Login</h1>
      <SignIn />

      {!showResetPassword ? (
        <p className="mt-4">
          <button
            onClick={() => setShowResetPassword(true)}
            className="text-blue-500 hover:underline"
          >
            Forgot your password?
          </button>
        </p>
      ) : (
        <div className="mt-4">
          <input
            type="email"
            placeholder="Enter your email to reset password"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="p-2 border rounded-lg w-full"
          />
          <ResetPasswordButton email={email} buttonText="Send Password Reset Email" className="mt-2" />
        </div>
      )}
    </div>
  );
};

export default Login;


// File: src\pages\Profile.jsx
// File: src/pages/Profile.jsx
import React, { useState, useEffect } from 'react';
import { auth, db } from '../firebaseConfig';
import { doc, getDoc, updateDoc, deleteDoc } from 'firebase/firestore';
import { deleteUser } from 'firebase/auth';
import ProfileForm from '../components/user/form/ProfileForm';
import { useNavigate } from 'react-router-dom';
import ResetPasswordButton from '../components/user/ResetPasswordButton';

const Profile = () => {
  const [displayName, setDisplayName] = useState('');
  const [bio, setBio] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const user = auth.currentUser;
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProfile = async () => {
      if (user) {
        const docRef = doc(db, "profiles", user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          const profileData = docSnap.data();
          setDisplayName(profileData.displayName);
          setBio(profileData.bio || '');
        }
      }
    };

    fetchProfile();
  }, [user]);

  const handleSave = async () => {
    if (user) {
      const docRef = doc(db, "profiles", user.uid);
      await updateDoc(docRef, {
        displayName: displayName,
        bio: bio,
      });
      setIsEditing(false);
    }
  };

  const handleDeleteAccount = async () => {
    if (user) {
      const confirmation = window.confirm("Are you sure you want to delete your account? This action cannot be undone.");
      if (confirmation) {
        try {
          // Delete user profile from Firestore
          await deleteDoc(doc(db, "profiles", user.uid));

          // Delete user from Firebase Authentication
          await deleteUser(user);

          // Redirect to home page after deletion
          navigate('/');
        } catch (error) {
          console.error("Error deleting account:", error);
          alert("Error deleting account. Please try again.");
        }
      }
    }
  };

  return (
    <div className="max-w-md mx-auto mt-8 p-4 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4">Profile</h2>
      {isEditing ? (
        <ProfileForm
          displayName={displayName}
          bio={bio}
          setDisplayName={setDisplayName}
          setBio={setBio}
          onSave={handleSave}
        />
      ) : (
        <>
          <div className="mb-4">
            <h3 className="text-xl font-bold">Display Name</h3>
            <p className="text-gray-700">{displayName}</p>
          </div>
          <div className="mb-4">
            <h3 className="text-xl font-bold">Bio</h3>
            <p className="text-gray-700">{bio}</p>
          </div>
          <button
            onClick={() => setIsEditing(true)}
            className="w-full bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600"
          >
            Edit Profile
          </button>
        </>
      )}
      <ResetPasswordButton email={user?.email} />
      <button
        onClick={handleDeleteAccount}
        className="w-full mt-4 bg-red-500 text-white p-2 rounded-lg hover:bg-red-600"
      >
        Delete Account
      </button>
    </div>
  );
};

export default Profile;


// File: src\pages\Register.jsx
// src/pages/Register.jsx
import React from 'react';
import SignUp from '../components/user/SignUp';

const Register = () => {
  return (
    <div className="flex flex-col justify-center items-center">
      <h1 className="text-3xl font-bold mb-6">Register</h1>
      <SignUp />
    </div>
  );
};

export default Register;


// File: src\pages\UserProfile.jsx
// File: src/pages/UserProfile.jsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';

const UserProfile = () => {
  const { userId } = useParams(); // Get the user ID from the URL
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const userDoc = await getDoc(doc(db, 'profiles', userId));
        if (userDoc.exists()) {
          setUser(userDoc.data());
        } else {
          console.log('No such user!');
        }
      } catch (error) {
        console.error('Error fetching user:', error);
      }
    };

    fetchUser();
  }, [userId]);

  if (!user) {
    return <p>Loading...</p>;
  }

  return (
    <div className="max-w-md mx-auto mt-8 p-4 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4">{user.displayName || user.email}</h2>
      <p>{user.bio}</p>
      {/* Add more user details here */}
    </div>
  );
};

export default UserProfile;


// File: src\pages\UsersList.jsx
// File: src/pages/UsersList.jsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { collection, getDocs } from 'firebase/firestore';

const UsersList = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const usersCollection = await getDocs(collection(db, 'profiles'));
        setUsers(usersCollection.docs.map(doc => ({ id: doc.id, ...doc.data() })));
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    };

    fetchUsers();
  }, []);

  return (
    <div className="max-w-md mx-auto mt-8">
      <h2 className="text-2xl font-bold mb-6">Users List</h2>
      <ul>
        {users.map(user => (
          <li key={user.id} className="mb-4">
            <Link to={`/profile/${user.id}`} className="text-blue-500 hover:underline">
              {user.displayName || user.email}
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default UsersList;


