// File: src\App.jsx
// File: src/App.jsx
import React, { lazy, Suspense } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Layout from './components/common/Layout';
import useAuth from './hooks/useAuth';
import ProtectedRoute from './components/common/ProtectedRoute';
import Home from './pages/Home';
import headerImage from './assets/6675303.svg';  // Import the image

const Register = lazy(() => import('./pages/Register'));
const Login = lazy(() => import('./pages/Login'));
const Profile = lazy(() => import('./pages/Profile'));
const Buckets = lazy(() => import('./pages/Buckets'));
const BucketView = lazy(() => import('./pages/BucketView'));

function App() {
  const { user } = useAuth();

  return (
    <Router>
      <Layout user={user} pageTitle="Store and share, it's simple" headerImage={headerImage}>
        <Suspense fallback={<div>Loading...</div>}>
          <Routes>
            <Route path="/" element={<Home />} />  {/* Home route */}
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/profile" element={
              <ProtectedRoute>
                <Profile />
              </ProtectedRoute>
            } />
            <Route path="/buckets" element={
              <ProtectedRoute>
                <Buckets />
              </ProtectedRoute>
            } />
            <Route path="/bucket/:userId/:bucketId" element={<BucketView />} />
          </Routes>
        </Suspense>
      </Layout>
    </Router>
  );
}

export default App;


// File: src\components\bucket\AddBucketButton.jsx
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const AddBucketButton = ({ addBucket }) => {
  return (
    <div className="fixed bottom-10 left-0 right-0 flex justify-center z-50">
      <button 
          onClick={addBucket}
          className="mt-4 bg-indigo-500 text-white p-4 rounded-xl shadow-xl hover:bg-indigo-600 transition-all duration-200">
          <FontAwesomeIcon icon="plus" className="mr-2" />
          Add Another Bucket
      </button>
    </div>
  );
};

export default AddBucketButton;


// File: src\components\bucket\BucketItem.jsx
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import BucketUploader from './BucketUploader';
import BucketQRCode from './BucketQRCode';

const copyBucketLink = (user, bucket) => {
  const bucketUrl = `${window.location.origin}/bucket/${user.uid}/${bucket.id}`;
  navigator.clipboard.writeText(bucketUrl).then(() => {
    alert('Bucket link copied to clipboard!');
  }).catch(err => {
    console.error('Failed to copy the text to clipboard', err);
  });
};

const openBucketLinkInNewTab = (user, bucket) => {
  const bucketUrl = `${window.location.origin}/bucket/${user.uid}/${bucket.id}`;
  window.open(bucketUrl, '_blank');
};

const BucketItem = ({ bucket, updateBucketName, deleteBucket, toggleQRCodeLightbox, qrCodeLightbox, user, setBuckets, savedBuckets, buckets }) => {
  return (
    <div className="my-8 p-4 rounded-lg shadow-xl relative">
      <div className="flex justify-between items-center mb-6">
        <input
          type="text"
          value={bucket.name}
          onChange={(e) => updateBucketName(bucket.id, e.target.value)}
          onBlur={() => updateBucketName(bucket.id, bucket.name)}
          className={`w-full text-xl p-2 rounded-lg font-bold focus:outline-none focus:ring-2 ${
            savedBuckets[bucket.id] ? 'border-green-500 focus:ring-green-500' : 'focus:ring-blue-500'
          }`}
        />
        <button
          onClick={() => deleteBucket(bucket.id)}
          className="ml-4 text-slate-600 p-2 rounded-lg hover:bg-red-600 hover:text-white w-8 h-8 flex items-center justify-center transition-all duration-200" >
          <FontAwesomeIcon icon="trash" />
        </button>
      </div>
      <h3 className="font-bold mb-2 ml-2">Share your bucket</h3>
      <div className="flex items-center space-x-4">
        <div 
          className="flex items-center cursor-pointer hover:text-indigo-500 transition-all duration-200"
          onClick={() => toggleQRCodeLightbox(bucket.id)}
        >
          <FontAwesomeIcon icon="qrcode" className="mr-1 ml-2 text-2xl" />
        </div>
        <div className="flex items-center cursor-pointer hover:text-indigo-500 transition-all duration-200" onClick={() => copyBucketLink(user, bucket)}>
          <FontAwesomeIcon icon="link" className="mr-2 text-2xl" />
        </div>
        <div className="flex items-center cursor-pointer hover:text-indigo-500 transition-all duration-200" onClick={() => openBucketLinkInNewTab(user, bucket)}>
          <FontAwesomeIcon icon="external-link-alt" className="mr-2 text-2xl" />
        </div>
      </div>
      {qrCodeLightbox[bucket.id] && (
        <div 
          className="absolute inset-0 backdrop-blur-sm bg-white/60 rounded-lg flex items-center justify-center hover:cursor-pointer"
          onClick={() => toggleQRCodeLightbox(bucket.id)}
        >
          <button
            className="absolute top-2 right-3 text-gray-800 text-2xl hover:text-gray-600 transition-all duration-200"
            onClick={(e) => {
              e.stopPropagation();
              toggleQRCodeLightbox(bucket.id);
            }}
          >
            <FontAwesomeIcon icon="times" />
          </button>
          <div className="bg-white/0 p-4 rounded-lg relative" onClick={(e) => e.stopPropagation()}>
            <BucketQRCode user={user} bucketId={bucket.id} className="w-48 h-48"/>
          </div>
        </div>
      )}
      <BucketUploader
        key={bucket.id}
        user={user}
        files={bucket.files || []}
        setFiles={(newFiles) => {
          setBuckets(prevBuckets => 
            prevBuckets.map(b => 
              b.id === bucket.id ? {...b, files: newFiles} : b
            )
          );
        }}
        bucketId={bucket.id}
        buckets={buckets}
      />
    </div>
  );
};

export default BucketItem;


// File: src\components\bucket\BucketList.jsx
import React from 'react';
import BucketItem from './BucketItem';

const BucketList = ({ buckets, updateBucketName, deleteBucket, toggleQRCodeLightbox, qrCodeLightbox, user, setBuckets, savedBuckets }) => {
  return (
    <div className="max-w-md mx-auto mt-6 p-8 bg-white rounded-lg shadow-sm">
      {buckets.map((bucket) => (
        <BucketItem
          key={bucket.id}
          bucket={bucket}
          updateBucketName={updateBucketName}
          deleteBucket={deleteBucket}
          toggleQRCodeLightbox={toggleQRCodeLightbox}
          qrCodeLightbox={qrCodeLightbox}
          user={user}
          setBuckets={setBuckets}
          savedBuckets={savedBuckets}
          buckets={buckets}
        />
      ))}
    </div>
  );
};

export default BucketList;


// File: src\components\bucket\BucketQRCode.jsx
import React, { useRef } from 'react';
import { QRCodeSVG } from 'qrcode.react';
import { saveAs } from 'file-saver';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const BucketQRCode = ({ user, bucketId }) => {
  const qrRef = useRef();
  const bucketUrl = user?.uid 
    ? `${window.location.origin}/bucket/${user.uid}/${bucketId}`
    : '';

  const downloadSVG = () => {
    const svg = qrRef.current.querySelector('svg');
    const svgData = new XMLSerializer().serializeToString(svg);
    const blob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
    saveAs(blob, 'qrcode.svg');
  };

  const downloadPNG = () => {
    const svg = qrRef.current.querySelector('svg');
    const svgData = new XMLSerializer().serializeToString(svg);
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    img.src = 'data:image/svg+xml;base64,' + btoa(svgData);
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      canvas.toBlob((blob) => {
        saveAs(blob, 'qrcode.png');
      });
    };
  };

  const copyImage = () => {
    const svg = qrRef.current.querySelector('svg');
    const svgData = new XMLSerializer().serializeToString(svg);
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    img.src = 'data:image/svg+xml;base64,' + btoa(svgData);
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      canvas.toBlob((blob) => {
        const item = new ClipboardItem({ 'image/png': blob });
        navigator.clipboard.write([item]);
      });
    };
  };

  if (!user?.uid) {
    return <div>Unable to generate QR code: User ID not available</div>;
  }

  return (
    <div className="mt-4 flex flex-col items-center h-full max-h-full overflow-hidden">
      <div className="flex flex-col items-center justify-center h-full w-full max-w-xs" ref={qrRef} style={{ maxHeight: 'calc(100% - 100px)' }}>
        <QRCodeSVG 
          value={bucketUrl} 
          size={265} 
          className="w-full h-auto object-contain"
          bgColor={"#ffffff"}
          fgColor={"#000000"}
          level={"L"}
        />
      </div>
      <div className="mt-8 px-2 flex flex-row space-x-2 w-full justify-center">
        <button
          onClick={downloadPNG}
          className="py-2 px-4 bg-purple-500 text-white rounded-lg hover:bg-purple-400 flex items-center justify-center"
        >
          <FontAwesomeIcon icon="file-image" className="mr-2" />
          PNG
        </button>
        <button
          onClick={downloadSVG}
          className="py-2 px-4 bg-violet-500 text-white rounded-lg hover:bg-violet-400 flex items-center justify-center"
        >
          <FontAwesomeIcon icon="file-image" className="mr-2" />
          SVG
        </button>
        <button
          onClick={copyImage}
          className="py-2 px-4 bg-indigo-500 text-white rounded-lg hover:bg-indigo-400 flex items-center justify-center"
        >
          <FontAwesomeIcon icon="copy" className="mr-2" />
          Copy
        </button>
      </div>
    </div>
  );
};

export default BucketQRCode;


// File: src\components\bucket\BucketUploader.jsx
import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';
import { doc, updateDoc } from 'firebase/firestore';
import { storage, db } from '../../firebaseConfig';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { toast } from 'react-toastify';
import { compressImage } from '../../utils/imageUtils';
import FileItem from './FileItem';
import UploadingFileItem from './UploadingFileItem';
import { moveFile, deleteFile } from '../../utils/fileUtils';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const MAX_FILE_SIZE = 50 * 1024 * 1024; // 50 MB

const BucketUploader = ({ user, files = [], setFiles, bucketId, buckets }) => { 
  const [uploadProgress, setUploadProgress] = useState({});
  const [uploadingFiles, setUploadingFiles] = useState([]);

  const onDrop = useCallback(async (acceptedFiles) => {
    try {
      const newUploadingFiles = acceptedFiles.map(file => ({
        id: Date.now() + Math.random(),
        name: file.name,
        type: file.type,
        size: file.size,
        progress: 0,
        preview: URL.createObjectURL(file),
      }));
      setUploadingFiles(prev => [...prev, ...newUploadingFiles]);

      const uploadedFiles = await Promise.all(
        acceptedFiles.map(async (file, index) => {
          if (file.size > MAX_FILE_SIZE) {
            toast.error(`File ${file.name} exceeds the 50 MB limit and was not uploaded.`);
            return null;
          }

          let fileToUpload = file;

          if (file.type.startsWith('image/')) {
            const compressedFile = await compressImage(file, (progress) => {
              setUploadProgress(prev => ({ ...prev, [file.name]: progress * 50 }));
            });

            if (!compressedFile) {
              throw new Error('File compression failed');
            }

            fileToUpload = compressedFile;
          }

          const fileRef = ref(storage, `buckets/${user.uid}/${fileToUpload.name}`);
          const uploadTask = uploadBytesResumable(fileRef, fileToUpload);

          await new Promise((resolve, reject) => {
            uploadTask.on(
              'state_changed',
              (snapshot) => {
                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                setUploadingFiles(prev => prev.map((f, i) => i === index ? { ...f, progress } : f));
              },
              (error) => reject(error),
              () => resolve()
            );
          });

          const downloadUrl = await getDownloadURL(fileRef);

          return {
            id: newUploadingFiles[index].id,
            name: fileToUpload.name,
            type: fileToUpload.type,
            size: fileToUpload.size,
            url: downloadUrl,
            preview: URL.createObjectURL(fileToUpload),
          };
        })
      );

      const validUploadedFiles = uploadedFiles.filter(file => file !== null);

      if (validUploadedFiles.length > 0) {
        const updatedFiles = [...files, ...validUploadedFiles];
        setFiles(updatedFiles);

        const userDocRef = doc(db, 'profiles', user.uid);
        await updateDoc(userDocRef, {
          buckets: buckets.map(bucket => 
            bucket.id === bucketId 
              ? { ...bucket, files: updatedFiles }
              : bucket
          )
        });
      }

      setUploadingFiles(prev => prev.filter(f => !validUploadedFiles.some(vf => vf.id === f.id)));

    } catch (error) {
      console.error("Error processing files:", error);
      toast.error(`Error processing files. Please try again.`);
    }
  }, [user, files, setFiles, bucketId, buckets]);

  const handleMoveFile = (dragIndex, hoverIndex) => {
    moveFile(files, setFiles, dragIndex, hoverIndex);
  };

  const handleDeleteFile = (fileId, fileName) => {
    deleteFile(user, files, setFiles, buckets, bucketId, fileId, fileName);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: '*', 
    multiple: true,
  });

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="mb-4 p-2">
        <label className="block text- font-medium text-gray-700">Upload Files to Bucket</label>
        <div
          {...getRootProps()}
          className={`w-full pt-8 pb-8 pl-4 pr-4 border-2 border-dashed rounded-lg cursor-pointer focus:outline-none ${
            isDragActive ? 'border-blue-500 bg-blue-100' : 'border-gray-300'
          }`}
        >
          <input {...getInputProps()} />
          {isDragActive ? (
            <p className="text-center text-blue-500">
              <FontAwesomeIcon icon="upload" className="mr-2" />
              Drop your files!
            </p>
          ) : (
            <p className="text-center text-gray-500">
              <FontAwesomeIcon icon="upload" className="mr-2" />
              Drop zone - Add files to your bucket.
            </p>
          )}
        </div>
      </div>
      <div className="grid grid-cols-1 gap-4">
        {uploadingFiles.map((file) => (
          <UploadingFileItem key={file.id} file={file} deleteFile={handleDeleteFile} />
        ))}
        {files.map((file, index) => (
          <FileItem key={file.id} file={file} index={index} moveFile={handleMoveFile} deleteFile={handleDeleteFile} />
        ))}
      </div>
    </DndProvider>
  );
};

export default BucketUploader;


// File: src\components\bucket\FileItem.jsx
import React from 'react';
import { useDrag, useDrop } from 'react-dnd';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTrash } from '@fortawesome/free-solid-svg-icons';

const FileItem = ({ file, index, moveFile, deleteFile }) => {
  const [, dragRef] = useDrag({
    type: 'file',
    item: { index },
  });

  const [, dropRef] = useDrop({
    accept: 'file',
    hover(item) {
      if (item.index !== index) {
        moveFile(item.index, index);
        item.index = index;
      }
    },
  });

  return (
    <div ref={(node) => dragRef(dropRef(node))} className="pt-4 pb-4 mb-1 bg-slate-100 rounded-lg cursor-move flex justify-between items-center">
      <div className="flex items-center space-x-4">
        <div className="flex-shrink-0">
          {file.type.startsWith('image/') ? (
            <img src={file.url} alt={`Preview ${index}`} className="w-16 h-16 object-cover rounded-lg" />
          ) : (
            <span className="truncate block w-full text-center">
              {file.name.length > 10 
                ? file.name.slice(0, 7) + '...' + file.name.split('.').pop().toUpperCase()
                : file.name.split('.').pop().toUpperCase()}
            </span>
          )}
        </div>
        <div>
          <p>{file.name}</p>
          <p className="text-sm text-gray-500">{file.type}</p>
        </div>
      </div>
      <button onClick={() => deleteFile(file.id, file.name)} className="mr-2 text-slate-400 p-2 rounded-lg hover:bg-red-600 hover:text-white w-8 h-8 flex items-center justify-center transition-all duration-200">
        <FontAwesomeIcon icon={faTrash} />
      </button>
    </div>
  );
};

export default FileItem;


// File: src\components\bucket\UploadingFileItem.jsx
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTrash } from '@fortawesome/free-solid-svg-icons';

const UploadingFileItem = ({ file, deleteFile }) => (
  <div className="pt-4 pb-4 mb-1 bg-slate-100 rounded-lg flex justify-between items-center">
    <div className="flex items-center space-x-4">
      <div className="flex-shrink-0">
        {file.type.startsWith('image/') ? (
          <img src={file.preview} alt={`Preview ${file.name}`} className="w-16 h-16 object-cover rounded-lg" />
        ) : (
          <span className="truncate block w-full text-center">
            {file.name.length > 10 
              ? file.name.slice(0, 7) + '...' + file.name.split('.').pop().toUpperCase()
              : file.name.split('.').pop().toUpperCase()}
          </span>
        )}
      </div>
      <div className="flex-1">
        <p>{file.name}</p>
        <p className="text-sm text-gray-500">{file.type}</p>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${file.progress}%` }}></div>
        </div>
      </div>
    </div>
    <button onClick={() => deleteFile(file.id, file.name)} className="text-red-500 hover:text-red-700">
      <FontAwesomeIcon icon={faTrash} />
    </button>
  </div>
);

export default UploadingFileItem;


// File: src\components\common\Footer.jsx
import React from 'react';

const Footer = () => {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="max-w-md w-full m-auto my-40 p-8 rounded-lg bg-gray-900 text-gray-400">
      <div className="container mx-auto px-4 flex justify-between items-center">
        <p>&copy; {currentYear} Morten Pradsgaard. All rights reserved.</p>
        <nav>
          {/* <ul className="flex space-x-4">
            <li><a href="/privacy" className="hover:text-white">Privacy Policy</a></li>
            <li><a href="/terms" className="hover:text-white">Terms of Service</a></li>
            <li><a href="/contact" className="hover:text-white">Contact Us</a></li>
          </ul> */}
        </nav>
      </div>
    </footer>
  );
};

export default Footer;


// File: src\components\common\Header.jsx
import React from 'react';

const Header = ({ title, imageUrl }) => {
  return (
    <header className="bg-gray-800 text-white relative">
      {imageUrl && (
        <div className="absolute inset-0">
          <img src={imageUrl} alt="Header background" className="w-full h-full object-cover" />
          <div className="absolute inset-x-0 bottom-0 h-10 bg-gray-950"></div>
          <div className="absolute inset-x-0 bottom-10 h-60 bg-gradient-to-t from-gray-950 to-transparent"></div>
        </div>
      )}
      <div className="container mx-auto px-4 py-14 relative z-10 flex justify-center items-center">
        <h1 className="text-2xl sm:text-4xl font-bold leading-tight text-center">{title}</h1>
      </div>
    </header>
  );
};

export default Header;


// File: src\components\common\Layout.jsx
// File: src/components/Layout.jsx
import React, { useRef, useEffect, useState } from 'react';
import Navigation from './Navigation';
import Header from './Header';
import Footer from './Footer';

const LayoutComponent = ({ user, children, pageTitle, headerImage }) => {
  const [isNavFixed, setIsNavFixed] = useState(false);
  const headerRef = useRef(null);
  const navRef = useRef(null);

  useEffect(() => {
    const handleScroll = () => {
      if (headerRef.current && navRef.current) {
        const headerBottom = headerRef.current.getBoundingClientRect().bottom;
        setIsNavFixed(headerBottom <= 0);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <div className="flex flex-col min-h-screen bg-gray-950">
      <div ref={headerRef}>
        <Header title={pageTitle} imageUrl={headerImage} />
      </div>
      <div ref={navRef} style={{ height: isNavFixed ? navRef.current?.offsetHeight : 0 }} />
      <Navigation user={user} isFixed={isNavFixed} />
      <main className="flex-grow p-4">
        {children}
      </main>
      <Footer />
    </div>
  );
};

const Layout = React.memo(LayoutComponent);

export default Layout;


// File: src\components\common\Navigation.jsx
// File: src/components/Navigation.jsx
import React from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { signOut } from 'firebase/auth';
import { auth } from '../../firebaseConfig';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const Navigation = React.memo(({ user, isFixed }) => {
  const navigate = useNavigate();
  const location = useLocation();

  const handleLogout = async () => {
    await signOut(auth);
    localStorage.removeItem('email');
    localStorage.removeItem('password');
    navigate('/');
  };

  const isActive = (path) => location.pathname === path;

  return (
    <div className={`${isFixed ? 'fixed top-2 left-0 right-0' : 'absolute left-0 right-0 top-40'} flex justify-center z-50 px-6`}>
      <div className="max-w-sm w-full bg-white/30 dark:bg-gray-800/30 backdrop-blur-md rounded-xl shadow-xl transition-all duration-300">
        <nav className="h-16 flex items-center justify-center space-x-4 px-4">
          <Link to="/" className={`text-2xl hover:underline ${isActive('/') ? 'text-indigo-500' : 'text-white'}`}>
            <FontAwesomeIcon icon="qrcode" className="mr-3"/>
          </Link>
          {!user && (
            <Link to="/register" className={`hover:underline ${isActive('/register') ? 'text-indigo-500' : 'text-white'}`}>
              <FontAwesomeIcon icon="user-plus" className="mr-3" />
            </Link>
          )}
          {user ? (
            <>
              <Link to="/buckets" className={`mr-3 text-2xl hover:underline ${isActive('/buckets') ? 'text-indigo-500' : 'text-white'}`}>
                <FontAwesomeIcon icon="cubes" className="mr-3" />
              </Link>
              <Link to="/profile" className={`mr-3 hover:underline ${isActive('/profile') ? 'text-indigo-500' : 'text-white'}`}>
                <FontAwesomeIcon icon="user" className="mr-3" />
              </Link>
              <button
                onClick={handleLogout}
                className="text-white text-2xl hover:underline focus:outline-none"
              >
                <FontAwesomeIcon icon="sign-out-alt" className="mr-3" />
              </button>
            </>
          ) : (
            <Link to="/login" className={`text-2xl hover:underline ${isActive('/login') ? 'text-indigo-500' : 'text-white'}`}>
              <FontAwesomeIcon icon="sign-in-alt" className="mr-3"/>
            </Link>
          )}
        </nav>
      </div>
    </div>
  );
});

export default Navigation;

// File: src\components\common\ProtectedRoute.jsx
// File: src/components/ProtectedRoute.jsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import useAuth from '../../hooks/useAuth';

const ProtectedRoute = ({ children }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div>Loading...</div>; // Or any loading spinner/component
  }

  if (!user) {
    return <Navigate to="/login" />;
  }

  return children;
};

export default ProtectedRoute;


// File: src\components\user\DeleteAccountButton.jsx
import React from 'react';
import { doc, deleteDoc } from 'firebase/firestore';
import { deleteObject, ref } from 'firebase/storage';
import { useNavigate } from 'react-router-dom';
import { auth, db, storage } from '../../firebaseConfig';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const DeleteAccountButton = ({ profilePicUrl, user }) => {
  const navigate = useNavigate();

  const handleDeleteAccount = async () => {
    const confirmDelete = window.confirm("Are you sure you want to delete your account? This action cannot be undone.");
    
    if (confirmDelete) {
      if (user) {
        const userRef = doc(db, 'profiles', user.uid);
        if (profilePicUrl) {
          const imageRef = ref(storage, profilePicUrl);
          await deleteObject(imageRef); // Delete profile picture from storage
        }
        await deleteDoc(userRef); // Delete user profile from Firestore
        await user.delete(); // Delete user account
        navigate('/'); // Redirect to home after deletion
      }
    }
  };

  return (
    <div className="mt-4">
      <a
        href="#"
        onClick={handleDeleteAccount}
        className="text-red-500 hover:underline"
      >
        Delete Account
      </a>
    </div>
  );
};

export default DeleteAccountButton;


// File: src\components\user\EmailVerificationLightbox.jsx
// File: src/components/user/EmailVerificationLightbox.jsx
import React, { useState, useEffect } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const EmailVerificationLightbox = ({ isOpen, onClose, checkEmailVerification, message }) => {
  const [verified, setVerified] = useState(false);
  const [resending, setResending] = useState(false);

  useEffect(() => {
    if (isOpen) {
      const intervalId = setInterval(async () => {
        const result = await checkEmailVerification();
        setVerified(result);
        if (result) {
          clearInterval(intervalId);
          setTimeout(onClose, 2000);
        }
      }, 5000); // Checks every 5 seconds

      return () => clearInterval(intervalId); // Cleanup interval on component unmount or close
    }
  }, [isOpen, checkEmailVerification, onClose]);

  const handleResendVerification = async () => {
    try {
      setResending(true);
      await sendEmailVerification(auth.currentUser);
      alert('Verification email resent. Please check your inbox.');
    } catch (error) {
      console.error('Error resending verification email:', error);
      alert('Error resending verification email. Please try again.');
    } finally {
      setResending(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center">
      <div className="p-12 bg-slate-900/60 backdrop-blur-lg rounded-lg shadow-lg text-center text-white inline-flex items-center">
        {!verified ? (
          <>
            <div className="relative flex space-x-2 z-10">
              <FontAwesomeIcon icon="spinner" spin className="text-amber-500" />
            </div>
            <p className="relative ml-4 z-10">{message}</p>
            <button
              onClick={handleResendVerification}
              className={`ml-4 z-10 bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 ${resending ? 'opacity-50' : ''}`}
              disabled={resending}
            >
              <FontAwesomeIcon icon="envelope" className="mr-2" />
              {resending ? 'Resending...' : 'Resend verification email'}
            </button>
          </>
        ) : (
          <>
            <div className="relative text-green-500 text-2xl z-10"><FontAwesomeIcon icon="check" /></div>
            <p className="relative ml-4 z-10">Email verified!</p>
          </>
        )}
      </div>
    </div>
  );
};

export default EmailVerificationLightbox;


// File: src\components\user\form\AuthForm.jsx
// File: src/components/AuthForm.jsx
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const AuthForm = ({ title, children, onSubmit, icon }) => (
  <form onSubmit={onSubmit} className="max-w-sm mx-auto bg-white p-4 rounded-lg shadow-md">
    <h2 className="text-xl font-bold mb-4">
      <FontAwesomeIcon icon={icon} className="mr-2" />
      {title}
    </h2>
    {children}
    <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600">
      <FontAwesomeIcon icon={icon} className="mr-2" />
      {title}
    </button>
  </form>
);

export default AuthForm;


// File: src\components\user\form\FormInput.jsx
// File: src/components/FormInput.jsx
import React from 'react';

const FormInput = ({ type, value, onChange, placeholder }) => (
  <input
    type={type}
    value={value}
    onChange={onChange}
    placeholder={placeholder}
    className="w-full p-2 mb-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
  />
);

export default FormInput;


// File: src\components\user\ProfileField.jsx
import React, { useState } from 'react';
import { doc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebaseConfig';

const ProfileField = ({ label, value, setValue, fieldName, user }) => {
  const [isSaved, setIsSaved] = useState(false);

  const handleSave = async () => {
    if (user) {
      const docRef = doc(db, 'profiles', user.uid);
      await updateDoc(docRef, {
        [fieldName]: value,
      });
      setIsSaved(true);
      setTimeout(() => setIsSaved(false), 2000);
    }
  };

  return (
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700">{label}</label>
        <input
          type="text"
          value={value}
          onChange={(e) => setValue(e.target.value)}
          onBlur={handleSave}
          className={`w-full p-2 border rounded-lg focus:outline-none focus:ring-2 ${
            isSaved ? 'border-green-500 focus:ring-green-500' : 'focus:ring-blue-500'
          }`}
        />
    </div>
  );
};

export default ProfileField;


// File: src\components\user\ResetPasswordButton.jsx
// File: src/components/ResetPasswordButton.jsx
import React from 'react';
import { auth } from '../../firebaseConfig';
import { sendPasswordResetEmail } from 'firebase/auth';

const ResetPasswordButton = ({ email, buttonText = "Reset Password", className = "" }) => {
  
  const handleResetPassword = async () => {
    if (email) {
      try {
        await sendPasswordResetEmail(auth, email);
        alert('Password reset email sent! Please check your inbox.');
      } catch (error) {
        console.error('Error sending password reset email:', error);
        alert('Error sending password reset email. Please try again.');
      }
    } else {
      alert('Please provide a valid email address.');
    }
  };

  return (
    <button
      onClick={handleResetPassword}
      className={`bg-yellow-500 text-white p-2 rounded-lg hover:bg-yellow-600 ${className}`}
    >
      {buttonText}
    </button>
  );
};

export default ResetPasswordButton;


// File: src\components\user\SignIn.jsx
// File: src/components/user/SignIn.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { auth } from '../../firebaseConfig';
import { signInWithEmailAndPassword } from 'firebase/auth';
import CryptoJS from 'crypto-js';
import AuthForm from '../../components/user/form/AuthForm';
import FormInput from '../../components/user/form/FormInput';
import EmailVerificationLightbox from '../../components/user/EmailVerificationLightbox';

const SECRET_KEY = import.meta.env.VITE_SECRET_KEY;

const SignIn = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const [isLightboxOpen, setIsLightboxOpen] = useState(false);
  const navigate = useNavigate(); 

  useEffect(() => {
    const storedEmail = localStorage.getItem('email');
    const storedPassword = localStorage.getItem('password');
    
    if (storedEmail && storedPassword) {
      setEmail(CryptoJS.AES.decrypt(storedEmail, SECRET_KEY).toString(CryptoJS.enc.Utf8));
      setPassword(CryptoJS.AES.decrypt(storedPassword, SECRET_KEY).toString(CryptoJS.enc.Utf8));
      setRememberMe(true);
    }
  }, []);

  const checkEmailVerification = async () => {
    await auth.currentUser.reload();
    return auth.currentUser.emailVerified;
  };

  const handleSignIn = async (e) => {
    e.preventDefault();
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      await user.reload(); // Reload user to get the latest data
      if (!user.emailVerified) {
        setIsLightboxOpen(true); // Open the lightbox if the email is not verified
        return;
      }

      if (rememberMe) {
        localStorage.setItem('email', CryptoJS.AES.encrypt(email, SECRET_KEY).toString());
        localStorage.setItem('password', CryptoJS.AES.encrypt(password, SECRET_KEY).toString());
      } else {
        localStorage.removeItem('email');
        localStorage.removeItem('password');
      }

      navigate('/');
    } catch (error) {
      console.error('Error signing in:', error);
      alert('Error signing in');
    }
  };

  return (
    <>
      <AuthForm title="Login" onSubmit={handleSignIn}>
        <FormInput
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
        />
        <FormInput
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
        />
        <div className="flex items-center mb-4">
          <input
            type="checkbox"
            checked={rememberMe}
            onChange={(e) => setRememberMe(e.target.checked)}
            className="mr-2"
            message="You need to verify your email to sign in, please check your inbox..."
          />
          <label className="text-gray-700">Remember Me</label>
        </div>
      </AuthForm>

      <EmailVerificationLightbox
        isOpen={isLightboxOpen}
        onClose={() => setIsLightboxOpen(false)}
        checkEmailVerification={checkEmailVerification}
      />
    </>
  );
};

export default SignIn;


// File: src\components\user\SignUp.jsx
// File: src/components/user/SignUp.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { auth, db } from '../../firebaseConfig';
import { createUserWithEmailAndPassword, sendEmailVerification, signOut, signInWithEmailAndPassword } from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import AuthForm from '../../components/user/form/AuthForm';
import FormInput from '../../components/user/form/FormInput';
import EmailVerificationLightbox from '../../components/user/EmailVerificationLightbox';


const SignUp = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [isLightboxOpen, setIsLightboxOpen] = useState(false);
  const [temporaryUser, setTemporaryUser] = useState(null);
  const navigate = useNavigate();

  const handleSignUp = async (e) => {
    e.preventDefault();

    // Check if displayName is empty
    if (!displayName.trim()) {
      alert('Display Name is required');
      return;
    }

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      await setDoc(doc(db, 'profiles', user.uid), {
        uid: user.uid,
        email: user.email,
        displayName: displayName,
      });

      await sendEmailVerification(user);
      setTemporaryUser({ email, password }); // Store email and password temporarily for checking status
      setIsLightboxOpen(true);

      await signOut(auth);

    } catch (error) {
      console.error('Error signing up:', error);
      alert('Error signing up');
    }
  };

  return (
    <>
      <AuthForm title="Sign Up" onSubmit={handleSignUp}>
        <input
          type="text"
          placeholder="Display Name"
          value={displayName}
          onChange={(e) => setDisplayName(e.target.value)}
          className="w-full p-2 mb-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <FormInput
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
        />
        <FormInput
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
        />
      </AuthForm>

      <EmailVerificationLightbox
        isOpen={isLightboxOpen}
        onClose={() => {
          setIsLightboxOpen(false);
          navigate('/login'); // Redirect to the login page after closing the lightbox
        }}
        checkEmailVerification={async () => {
          if (temporaryUser) {
            try {
              // Sign in silently to check verification
              const userCredential = await signInWithEmailAndPassword(
                auth,
                temporaryUser.email,
                temporaryUser.password
              );
              const user = userCredential.user;
              await user.reload(); // Reload user data
              return user.emailVerified; // Return verification status
            } catch (error) {
              console.error('Error checking email verification:', error);
              return false;
            }
          }
          return false;
        }}
        message="Registration successful! Please check your inbox to verify your email before logging in."
      />
    </>
  );
};

export default SignUp;


// File: src\firebaseConfig.js
// src/firebaseConfig.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);

export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);


// File: src\fontawesome.js
import { library } from '@fortawesome/fontawesome-svg-core';
import { 
  faTrash, 
  faUpload, 
  faSignInAlt, 
  faUserPlus, 
  faHome, 
  faUser, 
  faSignOutAlt,
  faPlus,
  faSave,
  faEnvelope,
  faLock,
  faCheck,
  faSpinner,
  faQrcode,
  faFill,
  faShapes,
  faCubes,
  faLink,
  faExternalLinkAlt,
  faTimes,
  faDownload,
  faCopy,
  faFileImage // Updated icon name
} from '@fortawesome/free-solid-svg-icons';

library.add(
  faTrash, 
  faUpload, 
  faSignInAlt, 
  faUserPlus, 
  faHome, 
  faUser, 
  faSignOutAlt,
  faPlus,
  faSave,
  faEnvelope,
  faLock,
  faCheck,
  faSpinner,
  faQrcode,
  faFill,
  faShapes,
  faCubes,
  faLink,
  faExternalLinkAlt,
  faTimes,
  faDownload,
  faCopy,
  faFileImage // Updated icon name
);

// File: src\hooks\useAuth.js
// File: src/hooks/useAuth.js
import { useState, useEffect } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from '../firebaseConfig';

const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true); 

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user || null); // Ensure user is null when not authenticated
      setLoading(false); 
    });

    return () => unsubscribe();
  }, []);

  return { user, loading };
};

export default useAuth;


// File: src\main.jsx
// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import './fontawesome';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);


// File: src\pages\Buckets.jsx
import React, { useState, useEffect, useRef } from 'react';
import { auth, db, storage } from '../firebaseConfig';
import { doc, getDoc, updateDoc, arrayRemove, arrayUnion } from 'firebase/firestore';
import { deleteObject, ref } from 'firebase/storage';
import { v4 as uuidv4 } from 'uuid';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import BucketList from '../components/bucket/BucketList';
import AddBucketButton from '../components/bucket/AddBucketButton';

const Profile = () => {
  const [buckets, setBuckets] = useState([]);
  const [savedBuckets, setSavedBuckets] = useState({});
  const user = auth.currentUser;
  const [qrCodeLightbox, setQrCodeLightbox] = useState({});
  const bottomRef = useRef(null);

  useEffect(() => {
    const fetchBuckets = async () => {
      if (user) {
        const docRef = doc(db, 'profiles', user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          const userData = docSnap.data();
          setBuckets(userData.buckets || []);
        }
      }
    };

    fetchBuckets();
  }, [user]);

  useEffect(() => {
    if (user && buckets.length) {
      const docRef = doc(db, 'profiles', user.uid);
  
      // Filter out non-serializable properties and handle cases where files is not an array
      const serializableBuckets = buckets.map(bucket => ({
        ...bucket,
        files: Array.isArray(bucket.files) ? bucket.files.map(file => ({
          ...file
          // Ensure no non-serializable fields are included in files, if needed
        })) : [] // Default to empty array if files is not an array
      }));
  
      updateDoc(docRef, { buckets: serializableBuckets });
    }
  }, [buckets, user]);

  const addBucket = async () => {
    const newBucket = {
      id: uuidv4(),
      name: `Bucket ${buckets.length + 1}`,
      files: [],
    };
    setBuckets([...buckets, newBucket]);
  
    // Update Firestore
    const docRef = doc(db, 'profiles', user.uid);
    await updateDoc(docRef, {
      buckets: arrayUnion(newBucket)
    });

    // Scroll to the new bucket after a short delay to ensure it's rendered
    setTimeout(() => {
      bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  };

  const updateBucketFiles = (bucketId, newFiles) => {
    setBuckets((prevBuckets) =>
      prevBuckets.map((bucket) =>
        bucket.id === bucketId ? { ...bucket, files: newFiles } : bucket
      )
    );
  };

  const deleteBucket = async (bucketId) => {
    const bucket = buckets.find((b) => b.id === bucketId);
    if (bucket) {
      // Confirm the deletion action
      const confirmDelete = window.confirm(`Are you sure you want to delete the bucket "${bucket.name}" and all its files?`);
      if (!confirmDelete) return;
  
      // Delete each file in the bucket from Firebase Storage
      for (let file of bucket.files) {
        const fileRef = ref(storage, `buckets/${user.uid}/${file.name}`);
        await deleteObject(fileRef);
      }
  
      // Remove the bucket from local state and Firestore
      setBuckets((prevBuckets) => prevBuckets.filter((b) => b.id !== bucketId));
      const docRef = doc(db, 'profiles', user.uid);
      await updateDoc(docRef, {
        buckets: arrayRemove(bucket) // Use arrayRemove to remove the bucket from Firestore
      });
    }
  };

  const updateBucketName = async (bucketId, newName) => {
    setBuckets((prevBuckets) =>
      prevBuckets.map((bucket) =>
        bucket.id === bucketId ? { ...bucket, name: newName } : bucket
      )
    );

    // Save changes to Firestore
    const docRef = doc(db, 'profiles', user.uid);
    await updateDoc(docRef, { buckets });
    // Indicate the bucket has been saved
    setSavedBuckets((prevSavedBuckets) => ({
      ...prevSavedBuckets,
      [bucketId]: true,
    }));

    // Reset the saved state after a delay
    setTimeout(() => {
      setSavedBuckets((prevSavedBuckets) => ({
        ...prevSavedBuckets,
        [bucketId]: false,
      }));
    }, 2000);
  };

  const toggleQRCodeLightbox = (bucketId) => {
    setQrCodeLightbox(prev => ({
      ...prev,
      [bucketId]: !prev[bucketId]
    }));
  };

  return (
    <>
      <AddBucketButton addBucket={addBucket} />
      <BucketList
        buckets={buckets}
        updateBucketName={updateBucketName}
        deleteBucket={deleteBucket}
        toggleQRCodeLightbox={toggleQRCodeLightbox}
        qrCodeLightbox={qrCodeLightbox}
        user={user}
        setBuckets={setBuckets}
        savedBuckets={savedBuckets}
      />
      <div ref={bottomRef} />
    </>
  );
};

export default Profile;


// File: src\pages\BucketView.jsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { saveAs } from 'file-saver';
import JSZip from 'jszip';

const BucketView = () => {
  const { userId, bucketId } = useParams();
  const [bucket, setBucket] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    console.log('BucketView mounted, userId:', userId, 'bucketId:', bucketId);
    const fetchBucket = async () => {
      try {
        const userDoc = await getDoc(doc(db, 'profiles', userId));
        if (userDoc.exists()) {
          const userData = userDoc.data();
          const buckets = userData.buckets || [];
          const foundBucket = buckets.find(b => b.id === bucketId);
          
          if (foundBucket) {
            console.log('Bucket data:', foundBucket);
            setBucket(foundBucket);
          } else {
            console.log("No such bucket!");
            setError("Bucket not found");
          }
        } else {
          console.log("No such user!");
          setError("User not found");
        }
      } catch (err) {
        console.error("Error fetching bucket:", err);
        setError("Error fetching bucket");
      }
    };

    fetchBucket();
  }, [userId, bucketId]);

  if (error) {
    return <div>Error: {error} (BucketId: {bucketId})</div>;
  }

  if (!bucket) {
    return <div>Loading... (BucketId: {bucketId})</div>;
  }

  const downloadFile = (file) => {
    window.open(file.url, '_blank');
  };

  const downloadAllFiles = async () => {
    const isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    
    if (isChrome) {
      try {
        const zip = new JSZip();
        
        for (const file of bucket.files) {
          const blob = await fetch(file.url, { mode: 'no-cors' }).then(r => r.blob());
          zip.file(file.name, blob, { binary: true });
        }

        const zipBlob = await zip.generateAsync({ type: 'blob' });
        saveAs(zipBlob, `${bucket.name}.zip`);
      } catch (error) {
        console.error('Error creating zip file:', error);
      }
    } else {
      bucket.files.forEach(file => downloadFile(file));
    }
  };

  return (
    <div className="max-w-md mx-auto mt-6 p-8 pt-16 bg-white rounded-lg shadow-sm">
      <h3 className="text-2xl font-bold mb-4">{bucket.name}</h3>
      <div className="grid grid-cols-1 gap-4">
        {bucket.files && bucket.files.map((file) => (
          <div key={file.id} className="flex items-center justify-between space-x-4 pt-4 pb-4 mb-1 ml-2 mr-2 bg-slate-100 rounded-lg">
            <div className="flex items-center space-x-4">
              <div className="flex-shrink-0">
                {file.type.startsWith('image/') ? (
                  <img src={file.url} alt={file.name} className="w-16 h-16 object-cover rounded-lg" />
                ) : (
                  <div className="w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center">
                    <span>{file.name.split('.').pop().toUpperCase()}</span>
                  </div>
                )}
              </div>
              <div>
                <p>{file.name}</p>
                <p className="text-sm text-gray-500">{file.type}</p>
              </div>
            </div>
            <button
              onClick={() => downloadFile(file)}
              className="p-4 text-indigo-500 hover:text-blue-600"
              title="Download file"
            >
              <FontAwesomeIcon icon="download" />
            </button>
          </div>
        ))}
      </div>
      <div className="mt-6 text-center">
        <button
          onClick={downloadAllFiles}
          className="py-2 px-6 bg-indigo-500 text-white rounded-full hover:bg-indigo-600"
          title="Download all files"
        >
          <FontAwesomeIcon icon="download" />
        </button>
      </div>
    </div>
  );
};

export default BucketView;


// File: src\pages\Home.jsx
import React, { useState, useEffect } from 'react';
import useAuth from '../hooks/useAuth';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { Link } from 'react-router-dom';

const Home = () => {
    const { user } = useAuth();
    const [displayName, setDisplayName] = useState(null);
    const [recentActivity, setRecentActivity] = useState([]);

    useEffect(() => {
        const fetchUserProfile = async () => {
            if (user) {
                try {
                    const userDoc = await getDoc(doc(db, 'profiles', user.uid));
                    if (userDoc.exists()) {
                        setDisplayName(userDoc.data().displayName);
                    }
                } catch (error) {
                    console.error("Error fetching user profile:", error);
                }
            }
        };

        const fetchRecentActivity = async () => {
            if (user) {
                try {
                    const userDoc = await getDoc(doc(db, 'profiles', user.uid));
                    if (userDoc.exists()) {
                        setRecentActivity(userDoc.data().recentActivity || []);
                    }
                } catch (error) {
                    console.error("Error fetching recent activity:", error);
                }
            }
        };

        fetchUserProfile();
        fetchRecentActivity();
    }, [user]);

    return (
        <div className="max-w-md mx-auto mt-6 p-8 bg-white rounded-lg shadow-sm">
            {user ? (
                <>
                    <p className="text-gray-900 text-xl font-bold mt-10">Welcome, {displayName ? displayName : user.email}</p>
                    <div className="mt-4">
                        <h2 className="text-xl text-gray-900">How to Guide</h2>
                        <ul className="list-disc list-inside text-gray-900">
                            <li>Go to your <Link to="/profile" className="text-blue-500 hover:underline">Profile</Link> to update your information.</li>
                            <li>Visit <Link to="/buckets" className="text-blue-500 hover:underline">Buckets</Link> to manage your tasks.</li>
                        </ul>
                    </div>
                    <div className="mt-4">
                        <h2 className="text-xl text-gray-900">Recent Activity</h2>
                        <ul className="list-disc list-inside text-gray-900">
                            {recentActivity.length > 0 ? recentActivity.map((activity, index) => (
                                <li key={index}>{activity}</li>
                            )) : <li>No recent activity</li>}
                        </ul>
                    </div>
                </>
            ) : (
                <p>Welcome, guest</p>
            )}
        </div>
    );
};

export default Home;

// File: src\pages\Login.jsx
// File: src/pages/Login.jsx
import React, { useState } from 'react';
import SignIn from '../components/user/SignIn';
import ResetPasswordButton from '../components/user/ResetPasswordButton';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const Login = () => {
  const [email, setEmail] = useState('');
  const [showResetPassword, setShowResetPassword] = useState(false);

  return (
    <div className="flex flex-col justify-center items-center">
      <h1 className="text-3xl font-bold mb-6">Login</h1>
      <SignIn />

      {!showResetPassword ? (
        <p className="mt-4">
          <button
            onClick={() => setShowResetPassword(true)}
            className="text-blue-500 hover:underline"
          >
            Forgot your password?
          </button>
        </p>
      ) : (
        <div className="mt-4">
          <input
            type="email"
            placeholder="Enter your email to reset password"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="p-2 border rounded-lg w-full"
          />
          <ResetPasswordButton email={email} buttonText="Send Password Reset Email" className="mt-2" />
        </div>
      )}
    </div>
  );
};

export default Login;


// File: src\pages\Profile.jsx
import React, { useState, useEffect } from 'react';
import { auth, db} from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import ProfileField from '../components/user/ProfileField';
import DeleteAccountButton from '../components/user/DeleteAccountButton';


const Profile = () => {
  const [displayName, setDisplayName] = useState('');
  const [bio, setBio] = useState('');
  const [buckets] = useState([]);
  const user = auth.currentUser;

  useEffect(() => {
    const fetchProfile = async () => {
      if (user) {
        const docRef = doc(db, 'profiles', user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          const profileData = docSnap.data();
          setDisplayName(profileData.displayName);
          setBio(profileData.bio || '');
        }
      }
    };

    fetchProfile();
  }, [user]);



  return (
    <>
      <div className="max-w-md mx-auto mt-6 p-8 pt-16 bg-white rounded-lg shadow-sm">
        {user && (
          <div className="mb-4 p-2 bg-gray-100 rounded-lg">
             <p className="text-sm text-gray-600">User ID: {user.uid}</p> 
          </div>
        )}
        <ProfileField
          label="Name"
          value={displayName}
          setValue={setDisplayName}
          fieldName="displayName"
          user={user}
        />
        <ProfileField
          label="Description"
          value={bio}
          setValue={setBio}
          fieldName="bio"
          user={user}
        />

      </div>
      <div className="max-w-md mx-auto p-2 rounded-lg shadow-md flex justify-center">
        <div className="mb-4">
          <DeleteAccountButton profilePicUrl={buckets[0]?.files[0]?.url} user={user} />
        </div>
      </div>
    </>
  );
};

export default Profile;


// File: src\pages\Register.jsx
// src/pages/Register.jsx
import React from 'react';
import SignUp from '../components/user/SignUp';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const Register = () => {
  return (
    <div className="flex flex-col justify-center items-center">
      <h1 className="text-3xl font-bold mb-6">Register</h1>
      <SignUp />
    </div>
  );
};

export default Register;


// File: src\utils\fileUtils.js
import { ref, deleteObject } from 'firebase/storage';
import { doc, updateDoc } from 'firebase/firestore';
import { storage, db } from '../firebaseConfig';
import { toast } from 'react-toastify';

export const moveFile = (files, setFiles, dragIndex, hoverIndex) => {
  const newFiles = [...files];
  const [draggedFile] = newFiles.splice(dragIndex, 1);
  newFiles.splice(hoverIndex, 0, draggedFile);
  setFiles(newFiles);
};

export const deleteFile = async (user, files, setFiles, buckets, bucketId, fileId, fileName) => {
  try {
    const fileRef = ref(storage, `buckets/${user.uid}/${fileName}`);
    await deleteObject(fileRef);

    const updatedFiles = files.filter(file => file.id !== fileId);
    setFiles(updatedFiles);

    const userDocRef = doc(db, 'profiles', user.uid);
    await updateDoc(userDocRef, {
      buckets: buckets.map(bucket => 
        bucket.id === bucketId 
          ? { ...bucket, files: updatedFiles }
          : bucket
      )
    });

    toast.success(`File ${fileName} deleted successfully.`);
  } catch (error) {
    console.error("Error deleting file:", error);
    toast.error(`Error deleting file. Please try again.`);
  }
};


// File: src\utils\imageUtils.js
import imageCompression from 'browser-image-compression';

export const compressImage = async (file, onProgress) => {
  const options = {
    maxSizeMB: 1,
    maxWidthOrHeight: 1920,
    useWebWorker: true,
    onProgress,
  };

  try {
    const compressedFile = await imageCompression(file, options);
    return compressedFile;
  } catch (error) {
    console.error('Error compressing image:', error);
    return null;
  }
};


